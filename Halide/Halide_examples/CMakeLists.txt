cmake_minimum_required(VERSION 3.0.0 FATAL_ERROR)

project(halide_examples)

include_directories("D:/github/Halide/include" "D:/github/Halide/tools")
if( CMAKE_BUILD_TYPE STREQUAL "Debug")
# A separate folder as it needs to use llvm debug version
link_directories("D:/github/Halide/build_win64_debug/lib/Debug")
else()
link_directories("D:/github/Halide/build_win64/lib/Release")
endif()

link_libraries("Halide")

add_executable(lesson_01_basics  lesson_01_basics.cpp)        

add_executable(lesson_02_input_image  lesson_02_input_image.cpp)                     
target_include_directories(lesson_02_input_image PUBLIC "C:/Apps/Anaconda2/Library/include")
target_link_libraries(lesson_02_input_image 
                     "C:/Apps/Anaconda2/Library/lib/libpng.lib"
                     "C:/Apps/Anaconda2/Library/lib/z.lib"
                     "C:/Apps/Anaconda2/Library/lib/jpeg.lib" 
                     )
if(MSVC)
# work-around for MSVC
target_link_libraries(lesson_02_input_image 
                     "D:/github/Halide/hack/build_win64/Release/iob.lib"
                     "legacy_stdio_definitions.lib"
                     )
endif(MSVC)

add_executable(my_study_schedule                    my_study_schedule.cpp)       
add_executable(extern_stage  extern_stage.cpp)              
add_executable(test_fft test_fft.cpp)
add_executable(lesson_03_debugging_1                    lesson_03_debugging_1.cpp)                     
add_executable(lesson_04_debugging_2                    lesson_04_debugging_2.cpp)                     
add_executable(lesson_05_scheduling_1                   lesson_05_scheduling_1.cpp)                    
add_executable(lesson_06_realizing_over_shifted_domains lesson_06_realizing_over_shifted_domains.cpp)  
add_executable(lesson_07_multi_stage_pipelines          lesson_07_multi_stage_pipelines.cpp)           
add_executable(lesson_08_scheduling_2                   lesson_08_scheduling_2.cpp)                    
add_executable(lesson_09_update_definitions             lesson_09_update_definitions.cpp)

add_executable(lesson_10_aot_compilation_generate       lesson_10_aot_compilation_generate.cpp)        
set(RUN_WITHOUT_LEAKCHECK ${CMAKE_COMMAND} -E env "ASAN_OPTIONS=detect_leaks=0")
set(FILTER_H "lesson_10_halide.h")
set(FILTER_LIB "lesson_10_halide${CMAKE_STATIC_LIBRARY_SUFFIX}")
set(FILTER_DIR "${CMAKE_CURRENT_BINARY_DIR}")
add_custom_command(OUTPUT "${FILTER_H}" "${FILTER_LIB}"
                   DEPENDS lesson_10_aot_compilation_generate
                   COMMAND ${RUN_WITHOUT_LEAKCHECK} $<TARGET_FILE:lesson_10_aot_compilation_generate>
                   WORKING_DIRECTORY "${FILTER_DIR}"
                   COMMENT "generating stuff in ${FILTER_DIR}" )
add_custom_target(exec_lesson_10_aot_compilation_generate
                  DEPENDS "${FILTER_H}" "${FILTER_LIB}")

# This will be linked with the code generated by
# the generator (lesson_10_aot_compilation_generate)
add_executable(lesson_10_aot_compilation_run            lesson_10_aot_compilation_run.cpp)             
# add_dependencies(lesson_10_aot_compilation_run
#                  exec_lesson_10_aot_compilation_generate)
target_link_libraries(lesson_10_aot_compilation_run PRIVATE "${FILTER_DIR}/${FILTER_LIB}")
target_include_directories(lesson_10_aot_compilation_run PRIVATE "${FILTER_DIR}")
# # Needed to find HalideBuffer.h
# target_include_directories(lesson_10_aot_compilation_run PRIVATE "${CMAKE_BINARY_DIR}/include")

add_executable(lesson_11_cross_compilation              lesson_11_cross_compilation.cpp)               
add_executable(lesson_12_using_the_gpu                  lesson_12_using_the_gpu.cpp)                   
add_executable(lesson_13_tuples                         lesson_13_tuples.cpp)                          
add_executable(lesson_14_types                          lesson_14_types.cpp)                           

# TODO: Add GenGen.cpp where main resides
add_executable(lesson_15_generators                     lesson_15_generators.cpp)   

add_executable(lesson_16_rgb_generate                   lesson_16_rgb_generate.cpp)                    
add_executable(lesson_16_rgb_run                        lesson_16_rgb_run.cpp)                         
add_executable(lesson_17_predicated_rdom                lesson_17_predicated_rdom.cpp)                 
add_executable(lesson_18_parallel_associative_reductions lesson_18_parallel_associative_reductions.cpp) 
add_executable(lesson_19_wrapper_funcs                  lesson_19_wrapper_funcs.cpp)                   
add_executable(lesson_20_cloning_funcs                  lesson_20_cloning_funcs.cpp)                   
add_executable(lesson_21_auto_scheduler_generate        lesson_21_auto_scheduler_generate.cpp)         
add_executable(lesson_21_auto_scheduler_run             lesson_21_auto_scheduler_run.cpp)              

